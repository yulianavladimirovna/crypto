import random
import numpy as np
from random import shuffle


def print_code(code):
    print(f'[n, k, d] = [{code.length()}, {code.dimension()}, {code.minimum_distance()}]')
    print(code.generator_matrix())


def Pmatrix(n):  # генерирует матрицу веса 1
    slots = [i for i in range(n)]
    P = matrix(F, n, [0 for i in range(n ^ 2)])
    for i in range(n):
        index = random.choice(slots)
        slots.remove(index)
        P[i, index] = 1
    return P


def check_inequality(n, k, r):
    if k * (k + 1) * 0.5 >= n:
        if r == n:
            return True
        else:
            return False
    else:
        if r == (k * (k + 1) * 0.5):
            return True
        else:
            return False


def make_weight1(n, q):
    MS = MatrixSpace(QQ, n)
    permutation = list(range(0, n))
    shuffle(permutation)
    matrix = np.zeros((n, n))  # making zero matrix
    for i in range(n):
        matrix[i][permutation[i]] = 1  # putting 1 (by permutation)
    matrix_new = MS.matrix(matrix)
    return matrix_new.change_ring(GF(q))


def Schur_product(M, k1):
    Schur = []
    for i in range(k1):
        a = np.array(list(M[i]))
        for j in range(i, k1):
            b = np.array(list(M[j]))
            Schur.append(list(np.multiply(a, b)))
    return Schur


def dimrandomcode(n, k):
    if k * (k + 1) / 2 >= n:
        return n
    else:
        return (k * (k + 1)) / 2


def Prob(n, k):
    c1 = 1
    c2 = 1
    c = 1
    if ((k * (k + 1)) / 2 >= n and n >= k):
        return '1 Pr(' + str(n) + ')>=' + str(round(1 - 2 ** ((-c1) * k) - 2 ** ((-c2) * ((k * (k - 1)) / 2 - n)), 10))
    if n >= (k * (k + 1) / 2):
        return '2 Pr(' + str((k * (k + 1)) / 2) + ')>=' + str(round(1 - 2 ** ((-c) * (n - (k * (k - 1)) / 2)), 10))
    else:
        return 'условие не вписывается в теорему ' + 'n=' + str(n) + ' k=' + str(k) + ' (k*(k+1))/2=' + str(
            (k * (k + 1)) / 2)


def codegen(k, d, curv):  # возвращает матрицу кода, функциональное поле, размерность кода,и случайную матрицу
    P.<x,y,z> = ProjectiveSpace(k, 2)
    C = Curve(curv, P)
    if C.genus():
        F = C.function_field()
        pls = F.places()
        p = C.rational_points()[1]
        Q, = p.places()
        pls.remove(Q)
        G = d*Q
        code = codes.EvaluationAGCode(pls, G)
        
        print("-----------AG-code:-----------");
        print_code(code);
        SchurCalc(k, code.generator_matrix(), F)
        
        code1=codes.PuncturedCode(code, 1)
        print("-----------Punctured-code:-----------")
        print_code(code1)
        SchurCalc(k, code1.generator_matrix(), F)
        
        code2=code1.shortened([1])
        print("-----------Shortened-code:-----------")
        print_code(code2)
        SchurCalc(k, code2.generator_matrix(), F)
        
        code3=codes.SubfieldSubcode(code, GF(q, 'a'))
        print("-----------Subfield-code:-----------")
        print_code(code3)
        SchurCalc(k, code3.generator_matrix(), F)
        
        code41=code.dual_code()
        code42=codes.SubfieldSubcode(code41, GF(q, 'a'))
        code43=code42.dual_code()
        print("-----------Trace-code:-----------");
        print_code(code43)
        SchurCalc(k, code43.generator_matrix(), F)
        
    else:
        print("Ошибка, это не эллиптическая кривая")
        
        
      


def SchurCalc(k, M, F):  # вычисление квадратов шура при маскировке весом 1 
    k1 = M.rank()
    S = random_matrix(k, k1, k1)  # рандомная матрица
    n = len(M[0])
    while S.is_singular():  # проверка на обратимость
        S = random_matrix(k, k1, k1)
        
    # вычисление размерности случайного кода
    random_Schur = dimrandomcode(n, k1)
    print('Размерность квадрата шура случайного кода той же размерности = ', random_Schur)
    print(f'n = {n}, k = {k1}')

    # маскировка 1
    P1 = make_weight1(n, q)  # случайная матрица
    G_cap_hidden1 = Matrix(S * M * P1)  # замаскированная матрица вида 1
    G_cap_Schur1 = Matrix(F, Schur_product(G_cap_hidden1, k1))  # квадрат шура при маскировке 1
    print("\nВывод матрицы шура при маскировке вида 1")
    print(G_cap_Schur1)
    G1k = G_cap_Schur1.rank()
    print('Размерность квадрата шура маскировка весом 1 -', G1k)
    print(f'Проверка неравенства - {check_inequality(n, k1, G1k)}')



# Работа с АГ кодами
# задание поля, в случае эрмитовой учитывать что оно будет возведено в квадрат!
'''
Типы кодов:
    1 - эрмитов код, не требует задачи кривой
    2 - гипер-/эллиптический код, требует задания кривой
    3 - код на квартике клейна, не требует задания кривой
    M,F,k1,S=codegenAG(k,q,d,codetype) эрмитова кривая/квартика
    M,F,n,k1,S=codegenAG(k,q,d,codetype,curv) эллиптическая кривая
'''
q = 2
d = 8  # переменная в дивизоре G
k.<a> = GF(q)
P.<x,y,z> = ProjectiveSpace(k, 2)
curv = y**2*z+x*y*z-x**3- 0 * x**2*z-z**3  # кривая
codegen(k, d, curv)
