import random
import numpy as np
from random import shuffle, randint

def check_inequality(n, k, r):
    half_k = k * (k + 1) // 2  # целочисленное умножение
    if half_k >= n:
        return (r == n)
    else:
        return (r == half_k)


def make_weight1(n, q):
    """
    Создаёт перестановочную матрицу n x n над GF(q).
    У каждой строки ровно одна единица, расставленная по случайной перестановке столбцов.
    """
    M = zero_matrix(GF(q), n, n)
    perm = list(range(n))
    random.shuffle(perm)
    for i in range(n):
        M[i, perm[i]] = GF(q)(1)
    return M


def Schur_product(M, k1):
    """
    Вычисляет 'Schur-продукт' (покомпонентное умножение всех пар строк) матрицы M.
    Возвращаем объект вида np.array(...) размера [k1*(k1+1)/2, n].
    """
    Schur=[]
    for i in range(k1):
        a = np.array(list(M[i]))
        for j in range(i,k1):
            b = np.array(list(M[j]))
            Schur.append(list(np.multiply(a,b)))
    return Schur


def generate_random_non_singular_matrix(q, k1):
    M = random_matrix(GF(q),k1,k1) #рандомная матрица
    while M.is_singular():
        M = random_matrix(GF(q),k1,k1)
    return M


def SchurCalc(M):
    """
    Считает 'квадрат Шура' для генераторной матрицы M (размер k1 x n) над GF(q),
    предварительно маскируя её S*M*P1, где S - случайно-невырожденная (k1 x k1),
    а P1 - перестановочная (n x n).
    Возвращает булеву величину check_inequality(...) 
    """
    # Определяем k1 и n (число строк и столбцов матрицы)
    k1 = M.rank()
    n = M.ncols()

    # Генерируем случайную обратимую (k1 x k1)-матрицу S над GF(q)
    S = generate_random_non_singular_matrix(q, k1)

    # Генерируем перестановочную (n x n)-матрицу P1 над GF(q)
    P1 = make_weight1(n, q)

    # Замаскированная генераторная матрица = S * M * P1 (размер все равно k1 x n)
    G_cap_hidden1 = Matrix(S * M * P1)

    # Переводим обратно в Sage-матрицу над GF(q)
    G_cap_Schur1 = Matrix(GF(q), Schur_product(G_cap_hidden1, k1))

    # Считаем ранг
    G1k = G_cap_Schur1.rank()

    # Проверка неравенства
    return check_inequality(n, k1, G1k)


def codegen(k, d, curv, P):
    """
    Создает AG-код на кривой curv, а также производные коды (проколотый, укороченный, subfield, trace),
    для каждого вычисляет "квадрат Шура" в GF(q) и возвращает список из 5 результатов (True/False).
    """
    C = Curve(curv, P)  # Задаем проективную (эллиптическую) кривую
    res = [None] * 5

    if C.genus() == 1:  # Проверяем, что работаем с эллиптической кривой
        F = C.function_field()  # Функциональное поле кривой
        places = F.places(1)    # Места порядка 1

        if len(places) > 1:
            Q = places[0]
            places.remove(Q)

            # Дивизор G = d*Q
            G = d * Q
            # Создаем AG-код (Evaluation)
            code = codes.EvaluationAGCode(places, G)

            # Переводим генераторную матрицу в GF(q)
            GM_code = code.generator_matrix().change_ring(GF(q))
            # Cчитаем Шур-квадрат
            res[0] = SchurCalc(GM_code)

            # Проколотый код
            try:
                code1 = codes.PuncturedCode(code, 1)
                GM_code1 = code1.generator_matrix().change_ring(GF(q))
                res[1] = SchurCalc(GM_code1)

                # Укороченный код
                try:
                    code2 = code1.shortened([1])
                    GM_code2 = code2.generator_matrix().change_ring(GF(q))
                    res[2] = SchurCalc(GM_code2)
                except ValueError:
                    raise ValueError("Размерность кода не позволяет построить укороченный\n")
            except ValueError:
                raise ValueError("Размерность кода не позволяет построить проколотый\n")

            # Подкод над подполем
            code3 = codes.SubfieldSubcode(code, GF(q))
            GM_code3 = code3.generator_matrix().change_ring(GF(q))
            res[3] = SchurCalc(GM_code3)

            # Трасс-код = (Subfield(dual_code(code)))^dual_code
            code41 = code.dual_code()
            code42 = codes.SubfieldSubcode(code41, GF(q))
            code43 = code42.dual_code()
            GM_code43 = code43.generator_matrix().change_ring(GF(q))
            res[4] = SchurCalc(GM_code43)

        else:
            raise ValueError("Недостаточно мест для построения AG-кода")
    else:
        raise TypeError("Ошибка, это не эллиптическая кривая")

    return res


# -------------------- ОСНОВНОЙ БЛОК --------------------

q = 61
# В Sage синтаксис для GF(q) часто таков:  k.<a> = GF(q), но здесь условно:
k = GF(q)

# Параметр d для дивизора G = d*Q
d = q // 2 + 1

# Определяем проективное пространство, порождающие x, y, z
P.<x, y, z> = ProjectiveSpace(k, 2)

number_tests = 0  # Количество пройденных тестов
probs = [0] * 5   # Среднее значение (вероятность) для пяти типов кодов
total_tests = 1   # Сколько раз запускаем тест

while number_tests < total_tests:
    a_ = random.randint(0, q - 1)
    b_ = random.randint(0, q - 1)
    # c_ = random.randint(0, q - 1)  # если нужно было c, закомментирован

    # Задаём (наугад) эллиптическую кривую в проективных координатах:
    # y^2 * z - x^3 - a*x^2*z - b*z^3 = 0
    curv = y^2 * z - x^3 - a_ * x^2 * z - b_ * z^3

    try:
        start = time.time()
        res = codegen(k, d, curv, P)
        # Если все пять результатов не None
        if None not in res:
            end = time.time() - start
            # print(f"Время на один прогон: {end}s")

            # Обновляем среднее
            for i in range(5):
                probs[i] = (probs[i] * number_tests + (1 if res[i] else 0)) / (number_tests + 1)
            number_tests += 1
    except Exception as e:
        # Если что-то пошло не так, просто пропускаем, пытаемся заново
        continue

# Вывод накопленных "вероятностей" (долей успеха) для разных матриц
code_names = ['AG-code', 'Punctured-code', 'Shortened-code', 'Subfield-code', 'Trace-code']
for i in range(5):
    print(f"{code_names[i]}: {probs[i]}")
